연결리스트란
원소들을 저장할 때 그 다음 원소가 있는 위치를 포함시키는 방식으로 저장하는 자료구조
1. k번째 원소를 확인/변경하기 위해 O(k)가 필요
2. 임의의 위치에 원소를 추가/임의 위치의 원소 제거 O(1)
3. 원소들이 메모리 상에 연속해있지 않아 Cache hit rate가 낮지만 할당이 쉬움

단일 연결 리스트 (Singly Linked List)
이중 연결 리스트 (Doubly Linked List)
원형 연결 리스트 (Circular Linked List)

k번째 원소의 접근
배열 O(1) 리스트 O(k)
임의 위치에 원소 추가/제거
배열 O(n) 리스트 O(1)
메모리 상의 배치
배열 연속 리스트 불연속
추가적으로 필요한 공간(Overhead)
배열 X 리스트 O(n)

임의의 위치에서 원소를 추가하거나 임의 위치의 원소를 제거하는 연산을
많이 하는 경우에는 연결 리스트의 사용이 유리함

원형 연결 리스트 내의 임의의 노드가 하나 주어졌을 때
해당 List의 길이를 효율적으로 구하는 방법
-> 동일한 노드가 나올 때 까지 계속 다음 노드로 간다.

중간에 만나는 두 연결리스트의 시작점이 주어졌을 때 만나는 지점은?
-> 두 시작점 각각에 대해 끝까지 진행시켜 각각의 길이를 구함
   그 후 다시 두 시작점으로 돌아와 더 긴쪽을 둘의 차이만큼 먼저 이동하고
	 만날 때 까지 동시에 한 칸씩 전진 O(A+B)
	 
사이클이 있는지 판단?
Floyd's cycle-finding algorithm 공간복잡도 O(1), 시간복잡도 O(N)
한 칸식 가는 이터레이터와 두 칸씩 다는 이터레이터를 동일한 시작접에서
출발시키면 사이클이 있을 경우 두 커서는 반드시 만나게 된다.
만약 사이클이 ㅇ벗으면 두 커서가 만나지 못하고 연결 리스트의 끝에 도달한다.