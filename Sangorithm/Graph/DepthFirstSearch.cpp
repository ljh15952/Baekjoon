#include <iostream>

using namespace std;


int arr[7][7] = {
	{0,0,0,0,0,0,0},
	{0,0,1,1,0,1,0},
	{0,1,0,1,0,0,0},
	{0,1,1,0,1,1,1},
	{0,0,0,1,0,0,1},
	{0,1,0,1,0,0,0},
	{0,0,0,1,1,0,0}
};

bool isVisited[7];

void DFS(int k){
	
	isVisited[k] = true;
	cout << k << ' ';
	
	
	for(int i = 1; i <= 6; i++){
		
		if(isVisited[i]) continue;
		
		if(arr[k][i] == 1){
			DFS(i);
		}
	}
	
}

int main(){
	
	// 루트 노드: 1
	DFS(1); 
	cout << endl;
	
	return 0;
}

/*

깊이 우선 탐색
한 정점에서 탐색을 시작
시작 정점에 인접한 정점들 중 방문안한 정점을 임의로 선택하여 방문
정점 A에 인접한 방문안한 정점을 찾아 방문하다가 더 이상 방문안한 인접한 정점이 없으면
정점A를 방문하기 바로 전에 방문했던 정점으로 다시 돌아간다.
그 정점에 인접한 정점들 중 방문안한 정점이 있으면 같은 방법으로 탐색을 계속한다. 
시작 정점으로 돌아간 후에 인접한 정점들 중 방문안한 정점이 없으면 종료한다.

깊이 우선 신장 트리
깊이 우선 탐색 후 만들어지는 트리
루트 노드: 시작 정점


*/